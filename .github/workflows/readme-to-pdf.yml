name: Generate README PDF
on:
  push:
    paths:
      - README.md
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          npm install -g md-to-pdf
          pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2
      
      - name: Convert to PDF
        run: md-to-pdf README.md --launch-options '{"args":["--no-sandbox"]}'
      
      - name: Upload to Google Drive
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        run: |
          cat > upload_to_drive.py << 'EOF'
          import os
          import json
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          from google.oauth2 import service_account
          
          # Get credentials from environment
          creds_json = os.environ['GOOGLE_CREDENTIALS']
          folder_id = os.environ['FOLDER_ID']
          
          # Parse credentials
          creds_info = json.loads(creds_json)
          credentials = service_account.Credentials.from_service_account_info(
              creds_info, 
              scopes=['https://www.googleapis.com/auth/drive.file']
          )
          
          # Build Drive service
          service = build('drive', 'v3', credentials=credentials)
          
          # Check if file exists and delete it
          file_name = 'Knight-Battle-Game-README.pdf'
          try:
              results = service.files().list(
                  q=f"name='{file_name}' and parents in '{folder_id}'",
                  fields="files(id, name)"
              ).execute()
              files = results.get('files', [])
              for file in files:
                  service.files().delete(fileId=file['id']).execute()
                  print(f"Deleted existing file: {file['name']}")
          except Exception as e:
              print(f"No existing file to delete: {e}")
          
          # Upload new file
          file_metadata = {
              'name': file_name,
              'parents': [folder_id]
          }
          media = MediaFileUpload('README.pdf', mimetype='application/pdf')
          
          file = service.files().create(
              body=file_metadata,
              media_body=media,
              fields='id'
          ).execute()
          
          print(f"âœ… File uploaded successfully!")
          print(f"File ID: {file.get('id')}")
          print(f"File name: {file_name}")
          EOF
          
          python upload_to_drive.py
      
      - name: Upload PDF as Artifact (backup)
        uses: actions/upload-artifact@v4
        with:
          name: README-PDF
          path: README.pdf
